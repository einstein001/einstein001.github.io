<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>nacos数据库密码加密</title>
    <url>/2021/11/30/nacos%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<html><head></head><body></body></html><html><head></head><body><h4 id="nacos的application-properties文件中的数据库密码加密"><a href="#nacos的application-properties文件中的数据库密码加密" class="headerlink" title="nacos的application.properties文件中的数据库密码加密"></a>nacos的application.properties文件中的数据库密码加密</h4><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#*************** Config Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If user MySQL as datasource:</span></span><br><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Count of DB:</span></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Connect URL of DB:</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">nacos</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">nacos</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="修改nacos源码"><a href="#修改nacos源码" class="headerlink" title="修改nacos源码"></a>修改nacos源码</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">nacos数据库连接初始化所在的类是com.alibaba.nacos.config.service.DataSource包下的ExternalDataSourceServiceImpl类.完成数据库信息装配的方法是reload()方法.</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        List&lt;HikariDataSource&gt; dblist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            String val = <span class="keyword">null</span>;</span><br><span class="line">            val = ApplicationUtils.getProperty(<span class="string">"db.num"</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == val) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"db.num is null"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">int</span> dbNum = Integer.parseInt(val.trim());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dbNum; i++) {</span><br><span class="line">                HikariDataSource ds = <span class="keyword">new</span> HikariDataSource();</span><br><span class="line">                ds.setDriverClassName(JDBC_DRIVER_NAME);</span><br><span class="line"></span><br><span class="line">                val = ApplicationUtils.getProperty(<span class="string">"db.url."</span> + i);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == val) {</span><br><span class="line">                    fatalLog.error(<span class="string">"db.url."</span> + i + <span class="string">" is null"</span>);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"db.url."</span> + i + <span class="string">" is null"</span>);</span><br><span class="line">                }</span><br><span class="line">                ds.setJdbcUrl(val.trim());</span><br><span class="line"></span><br><span class="line">                val = ApplicationUtils.getProperty(<span class="string">"db.user."</span> + i, ApplicationUtils.getProperty(<span class="string">"db.user"</span>));</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == val) {</span><br><span class="line">                    fatalLog.error(<span class="string">"db.user."</span> + i + <span class="string">" is null"</span>);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"db.user."</span> + i + <span class="string">" is null"</span>);</span><br><span class="line">                }</span><br><span class="line">                ds.setUsername(val.trim());</span><br><span class="line">                </span><br><span class="line">			<span class="comment">// nacos在这里读取数据库密码</span></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------</span></span><br><span class="line">                val = ApplicationUtils.getProperty(<span class="string">"db.password."</span> + i, ApplicationUtils.getProperty(<span class="string">"db.password"</span>));</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == val) {</span><br><span class="line">                    fatalLog.error(<span class="string">"db.password."</span> + i + <span class="string">" is null"</span>);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"db.password."</span> + i + <span class="string">" is null"</span>);</span><br><span class="line">                }</span><br><span class="line">                String trim = val.trim();</span><br><span class="line">                <span class="comment">// 在这里可以自定义密码的解密规则,以最简单的base64为例,可以替换成自己的解密类</span></span><br><span class="line">                val=<span class="keyword">new</span> String(Base64.getDecoder().decode(trim));</span><br><span class="line">                ds.setPassword(val);</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------</span></span><br><span class="line">                val = ApplicationUtils.getProperty(<span class="string">"db.maxPoolSize."</span> + i, ApplicationUtils.getProperty(<span class="string">"db.maxPoolSize"</span>));</span><br><span class="line">                ds.setMaximumPoolSize(Integer.parseInt(defaultIfNull(val, <span class="string">"20"</span>)));</span><br><span class="line"></span><br><span class="line">                val = ApplicationUtils.getProperty(<span class="string">"db.minIdle."</span> + i, ApplicationUtils.getProperty(<span class="string">"db.minIdle"</span>));</span><br><span class="line">                ds.setMinimumIdle(Integer.parseInt(defaultIfNull(val, <span class="string">"50"</span>)));</span><br><span class="line"></span><br><span class="line">                ds.setConnectionTimeout(<span class="number">3000L</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 每10分钟检查一遍连接池</span></span><br><span class="line">                ds.setValidationTimeout(TimeUnit.MINUTES.toMillis(<span class="number">10L</span>));</span><br><span class="line">                ds.setConnectionTestQuery(<span class="string">"SELECT 1 FROM dual"</span>);</span><br><span class="line"></span><br><span class="line">                dblist.add(ds);</span><br><span class="line"></span><br><span class="line">                JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">                jdbcTemplate.setQueryTimeout(queryTimeout);</span><br><span class="line">                jdbcTemplate.setDataSource(ds);</span><br><span class="line"></span><br><span class="line">                testJTList.add(jdbcTemplate);</span><br><span class="line">                isHealthList.add(Boolean.TRUE);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dblist == <span class="keyword">null</span> || dblist.size() == <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"no datasource available"</span>);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            dataSourceList = dblist;</span><br><span class="line">            <span class="keyword">new</span> SelectMasterTask().run();</span><br><span class="line">            <span class="keyword">new</span> CheckDBHealthTask().run();</span><br><span class="line">        } <span class="keyword">catch</span> (RuntimeException e) {</span><br><span class="line">            fatalLog.error(DB_LOAD_ERROR_MSG, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(e);</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mvn -Prelease-nacos -Dmaven.test.skip=true clean install -U</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">然后等待打包成功.</span><br><span class="line">打包好的包位置:nacos-xxx\distribution\target\nacos-server-xxx.zip</span><br><span class="line">修改配置文件中的密码,用自己定义的加密方式加密一遍</span><br><span class="line">启动nacos,登录到控制台,日志没有报错那么修改nacos密码连接方式就完成了</span><br></pre></td></tr></tbody></table></figure>

<p>以上仅限于nacos1.3.0版本</p>
<hr>
<h4 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">完成个性化定制，自定义数据库密码的加密方式，其实并不难，只需要修改nacos源码中数据库连接部分即可</span><br><span class="line">nacos（1.4.1版本）数据库连接初始化所在的类是com.alibaba.nacos.config.service.DataSource包下的ExternalDataSourceProperties类，完成数据库信息装配的方法是 build 方法</span><br><span class="line">我们需要做的只是在nacos读取到配置文件中的密码之后，并且将属性值赋值到实体类之前将密码解析出来即可，以下是源码以及修改的部分</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="function">List&lt;HikariDataSource&gt; <span class="title">build</span><span class="params">(Environment environment, Callback&lt;HikariDataSource&gt; callback)</span> </span>{</span><br><span class="line">        List&lt;HikariDataSource&gt; dataSources = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Binder.get(environment).bind(<span class="string">"db"</span>, Bindable.ofInstance(<span class="keyword">this</span>));</span><br><span class="line">        Preconditions.checkArgument(Objects.nonNull(num), <span class="string">"db.num is null"</span>);</span><br><span class="line">        Preconditions.checkArgument(CollectionUtils.isNotEmpty(user), <span class="string">"db.user or db.user.[index] is null"</span>);</span><br><span class="line">        Preconditions.checkArgument(CollectionUtils.isNotEmpty(password), <span class="string">"db.password or db.password.[index] is null"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; num; index++) {</span><br><span class="line">            <span class="keyword">int</span> currentSize = index + <span class="number">1</span>;</span><br><span class="line">            Preconditions.checkArgument(url.size() &gt;= currentSize, <span class="string">"db.url.%s is null"</span>, index);</span><br><span class="line">            DataSourcePoolProperties poolProperties = DataSourcePoolProperties.build(environment);</span><br><span class="line">            poolProperties.setDriverClassName(JDBC_DRIVER_NAME);</span><br><span class="line">            poolProperties.setJdbcUrl(url.get(index).trim());</span><br><span class="line">            poolProperties.setUsername(getOrDefault(user, index, user.get(<span class="number">0</span>)).trim());</span><br><span class="line">            <span class="comment">/* nacos在这里读取数据库密码 */</span></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------</span></span><br><span class="line">            <span class="comment">/*poolProperties.setPassword(getOrDefault(password, index, password.get(0)).trim());*/</span></span><br><span class="line">            <span class="comment">// 在这里可以自定义密码的解密规则，此处采用sm4加密为例，可以替换成自己的解密类</span></span><br><span class="line">            String key = <span class="string">"86C63180C2806ED1F47B859DE501215B"</span>;</span><br><span class="line">            poolProperties.setPassword(</span><br><span class="line">                Sm4Util.decryptEcb(key, getOrDefault(password, index, password.get(<span class="number">0</span>)).trim()));</span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------</span></span><br><span class="line">            HikariDataSource ds = poolProperties.getDataSource();</span><br><span class="line">            ds.setConnectionTestQuery(TEST_QUERY);</span><br><span class="line">            dataSources.add(ds);</span><br><span class="line">            callback.accept(ds);</span><br><span class="line">        }</span><br><span class="line">        Preconditions.checkArgument(CollectionUtils.isNotEmpty(dataSources), <span class="string">"no datasource available"</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSources;</span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="sm4工具类"><a href="#sm4工具类" class="headerlink" title="sm4工具类"></a>sm4工具类</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--sm4加密算法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.66<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.bouncycastle.jce.provider.BouncyCastleProvider;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.pqc.math.linearalgebra.ByteUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.security.Security;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings("all")</span>	<span class="comment">// nacos一键打包时跳过检查，不加可能会报错</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sm4Util</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENCODING = <span class="string">"UTF-8"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ALGORITHM_NAME = <span class="string">"SM4"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加密算法/分组加密模式/分组填充方式</span></span><br><span class="line">    <span class="comment">//PKCS5Padding-以8个字节为一组分组加密</span></span><br><span class="line">    <span class="comment">//定义分组加密模式使用：PKCS5Padding</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ALGORITHM_NAME_ECB_PADDING = <span class="string">"SM4/ECB/PKCS5Padding"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//128-32位16进制;256-64位16进制</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_KEY_SIZE = <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成ECB暗号</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> algorithmName 算法名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mode          模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@explain</span> ECB模式（电子密码本模式：Electronic codebook）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Cipher <span class="title">generateEcbCipher</span><span class="params">(String algorithmName, <span class="keyword">int</span> mode, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        Cipher cipher = Cipher.getInstance(algorithmName, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">        Key sm4Key = <span class="keyword">new</span> SecretKeySpec(key, ALGORITHM_NAME);</span><br><span class="line">        cipher.init(mode, sm4Key);</span><br><span class="line">        <span class="keyword">return</span> cipher;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateKey() <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="keyword">return</span> generateKey(DEFAULT_KEY_SIZE);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateKey(<span class="keyword">int</span> keySize) <span class="keyword">throws</span> Exception {</span><br><span class="line">        KeyGenerator kg = KeyGenerator.getInstance(ALGORITHM_NAME, BouncyCastleProvider.PROVIDER_NAME);</span><br><span class="line">        kg.init(keySize, <span class="keyword">new</span> SecureRandom());</span><br><span class="line">        <span class="keyword">return</span> kg.generateKey().getEncoded();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sm4加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hexKey   16进制秘钥（忽略大小写）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramStr 待加密字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回16进制的加密字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptEcb</span><span class="params">(String hexKey, String paramStr)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        String cipherText = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">// 16进制字符串--&gt;byte[]</span></span><br><span class="line">        <span class="keyword">byte</span>[] keyData = ByteUtils.fromHexString(hexKey);</span><br><span class="line">        <span class="comment">// String--&gt;byte[]</span></span><br><span class="line">        <span class="keyword">byte</span>[] srcData = paramStr.getBytes(ENCODING);</span><br><span class="line">        <span class="comment">// 加密后的数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] cipherArray = encrypt_Ecb_Padding(keyData, srcData);</span><br><span class="line">        <span class="comment">// byte[]--&gt;hexString</span></span><br><span class="line">        cipherText = ByteUtils.toHexString(cipherArray);</span><br><span class="line">        <span class="keyword">return</span> cipherText;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密模式之Ecb</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@explain</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt_Ecb_Padding(<span class="keyword">byte</span>[] key, <span class="keyword">byte</span>[] data) <span class="keyword">throws</span> Exception {</span><br><span class="line">        Cipher cipher = generateEcbCipher(ALGORITHM_NAME_ECB_PADDING, Cipher.ENCRYPT_MODE, key);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sm4解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hexKey     16进制密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cipherText 16进制的加密字符串（忽略大小写）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密后的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@explain</span> 解密模式：采用ECB</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decryptEcb</span><span class="params">(String hexKey, String cipherText)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 用于接收解密后的字符串</span></span><br><span class="line">        String decryptStr = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">// hexString--&gt;byte[]</span></span><br><span class="line">        <span class="keyword">byte</span>[] keyData = ByteUtils.fromHexString(hexKey);</span><br><span class="line">        <span class="comment">// hexString--&gt;byte[]</span></span><br><span class="line">        <span class="keyword">byte</span>[] cipherData = ByteUtils.fromHexString(cipherText);</span><br><span class="line">        <span class="comment">// 解密</span></span><br><span class="line">        <span class="keyword">byte</span>[] srcData = decrypt_Ecb_Padding(keyData, cipherData);</span><br><span class="line">        <span class="comment">// byte[]--&gt;String</span></span><br><span class="line">        decryptStr = <span class="keyword">new</span> String(srcData, ENCODING);</span><br><span class="line">        <span class="keyword">return</span> decryptStr;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cipherText</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt_Ecb_Padding(<span class="keyword">byte</span>[] key, <span class="keyword">byte</span>[] cipherText) <span class="keyword">throws</span> Exception {</span><br><span class="line"></span><br><span class="line">        Cipher cipher = generateEcbCipher(ALGORITHM_NAME_ECB_PADDING, Cipher.DECRYPT_MODE, key);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(cipherText);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验加密前后的字符串是否为同一数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hexKey     16进制密钥（忽略大小写）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cipherText 16进制加密后的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramStr   加密前的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否为同一数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@explain</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verifyEcb</span><span class="params">(String hexKey, String cipherText, String paramStr)</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">        <span class="comment">// 用于接收校验结果</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// hexString--&gt;byte[]</span></span><br><span class="line">        <span class="keyword">byte</span>[] keyData = ByteUtils.fromHexString(hexKey);</span><br><span class="line">        <span class="comment">// 将16进制字符串转换成数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] cipherData = ByteUtils.fromHexString(cipherText);</span><br><span class="line">        <span class="comment">// 解密</span></span><br><span class="line">        <span class="keyword">byte</span>[] decryptData = decrypt_Ecb_Padding(keyData, cipherData);</span><br><span class="line">        <span class="comment">// 将原字符串转换成byte[]</span></span><br><span class="line">        <span class="keyword">byte</span>[] srcData = paramStr.getBytes(ENCODING);</span><br><span class="line">        <span class="comment">// 判断2个数组是否一致</span></span><br><span class="line">        flag = Arrays.equals(decryptData, srcData);</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        String key = <span class="string">"86C63180C2806ED1F47B859DE501215B"</span>;</span><br><span class="line">        String s = <span class="string">"QAZXSWEDCVFR"</span>;</span><br><span class="line">        String jiami = Sm4Util.encryptEcb(key, s);</span><br><span class="line">        System.out.println(<span class="string">"加密===="</span> + jiami);</span><br><span class="line">        String jiemi = Sm4Util.decryptEcb(key, jiami);</span><br><span class="line">        System.out.println(<span class="string">"解密===="</span> + jiemi);</span><br><span class="line">        <span class="keyword">byte</span>[] bs = ByteUtils.fromHexString(key);</span><br><span class="line">        System.out.println(Arrays.toString(bs));</span><br><span class="line">        System.out.println(ByteUtils.toHexString(generateKey()));</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"86C63180C2806ED1F47B859DE501215B"</span>;</span><br><span class="line">        <span class="keyword">int</span> byte_len = str.getBytes(<span class="string">"utf-8"</span>).length;</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        System.out.println(<span class="string">"字节长度为："</span> + byte_len);</span><br><span class="line">        System.out.println(<span class="string">"字符长度为："</span> + len);</span><br><span class="line">        System.out.println(<span class="string">"系统默认编码方式："</span> + System.getProperty(<span class="string">"file.encoding"</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="打包发布-1"><a href="#打包发布-1" class="headerlink" title="打包发布"></a>打包发布</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mvn -Prelease-nacos -Dmaven.test.skip=true -Drat.skip=true clean install -U</span><br></pre></td></tr></tbody></table></figure>

<p>以上仅限于nacos1.4.1版本</p>
</body></html>]]></content>
      <categories>
        <category>nacos</category>
      </categories>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql事务隔离</title>
    <url>/2021/12/21/mysql%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/</url>
    <content><![CDATA[<html><head></head><body></body></html><html><head></head><body><h4 id="一、隔离级别"><a href="#一、隔离级别" class="headerlink" title="一、隔离级别"></a>一、隔离级别</h4><h4 id="1-1理论"><a href="#1-1理论" class="headerlink" title="1.1理论"></a>1.1理论</h4><figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">MySQL中事务的隔离级别一共分为四种，分别如下</span><br><span class="line">序列化（<span class="keyword">SERIALIZABLE</span>）</span><br><span class="line">可重复读（<span class="keyword">REPEATABLE</span> <span class="keyword">READ</span>）</span><br><span class="line">读已提交（<span class="keyword">READ</span> <span class="keyword">COMMITTED</span>）</span><br><span class="line">读未提交（<span class="keyword">READ</span> <span class="keyword">UNCOMMITTED</span>）</span><br><span class="line">四种不同的隔离级别含义如下：</span><br><span class="line"><span class="number">1</span>、<span class="keyword">SERIALIZABLE</span></span><br><span class="line">如果隔离级别为序列化，则用户质检通过一个接一个顺序地执行当前的事务，这种隔离级别提供了事务之间最大限度的隔离。</span><br><span class="line"><span class="number">2</span>、<span class="keyword">REPEATABLE</span> <span class="keyword">READ</span></span><br><span class="line">在可重复读这一隔离级别上，事务不会被看成是一个序列，不过，当前正在执行事务部的变化依然不能被外部看到，也就是说，如果用户在另外一个事务中执行同条<span class="keyword">SELECT</span>语句次数，结果总是相同的。（因为正在执行的事务所产生的数据变化不能被外部看到）。</span><br><span class="line"><span class="number">3</span>、<span class="keyword">READ</span> <span class="keyword">COMMITTED</span></span><br><span class="line"><span class="keyword">READ</span> <span class="keyword">COMMITTED</span> 隔离级别的安全性比<span class="keyword">REPEATABLE</span> <span class="keyword">READ</span>隔离级别的安全性要低。处于<span class="keyword">READ</span> <span class="keyword">COMMITTED</span>级别的事务可以看到其它事务对数据的修改，也就是说，在事务处理期间，如果其它的事务修改了相应的表，那么同一个事务的多个<span class="keyword">SELECT</span>语句可能返回不同的结果。</span><br><span class="line"><span class="number">4</span>、<span class="keyword">READ</span> <span class="keyword">UNCOMMITTED</span></span><br><span class="line"><span class="keyword">READ</span> <span class="keyword">UNCOMMITTED</span>提供了事务之间最小限度的隔离，除了容易产生虚幻的读操作和不能重读的读操作外，处于这个隔离级别的事务可以读到其它事务还没提交的数据，如果这个事务使用其它事务未提交的变化作为计算的基础，然后那些未提交的变化被它们的父事务所撤销，这就导致了大量的数据变化。</span><br></pre></td></tr></tbody></table></figure>

<p><strong>在 MySQL 数据库种，默认的事务隔离级别是 REPEATABLE READ</strong></p>
<h4 id="1-2-SQL-实践"><a href="#1-2-SQL-实践" class="headerlink" title="1.2 SQL 实践"></a>1.2 SQL 实践</h4><p>接下来通过几条简单的 SQL 向读者验证上面的理论。</p>
<h4 id="1-2-1-查看隔离级别"><a href="#1-2-1-查看隔离级别" class="headerlink" title="1.2.1 查看隔离级别"></a>1.2.1 查看隔离级别</h4><p>通过如下 SQL 可以查看数据库实例默认的全局隔离级别和当前 session 的隔离级别：</p>
<p>MySQL8 之前使用如下命令查看 MySQL 隔离级别：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@GLOBAL</span>.tx_isolation, @<span class="variable">@tx</span>_isolation;</span><br></pre></td></tr></tbody></table></figure>

<p>查询结果如图：</p>
<p><img src="https://gitee.com/link_chm/img/raw/master/2838191292-812091da4f65cd39_fix732.png" alt="2838191292-812091da4f65cd39_fix732"></p>
<p>可以看到，默认的隔离级别为REPEATABLE-READ，全局隔离级别与当前会话级别皆是如此。</p>
<p><strong>MySQL8 开始，通过如下命令查看 MySQL 默认隔离级别</strong></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@GLOBAL</span>.transaction_isolation, @<span class="variable">@transaction</span>_isolation;</span><br></pre></td></tr></tbody></table></figure>

<p>就是关键字变了，其他都一样。</p>
<p>通过如下命令可以修改隔离级别（建议开发者在修改时修改当前 session 隔离级别即可，不用修改全局的隔离级别）：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED</span><br></pre></td></tr></tbody></table></figure>

<p>上面这条 SQL 表示将当前 session 的数据库隔离级别设置为 READ UNCOMMITTED，设置成功后，再次查询隔离级别，发现当前 session 的隔离级别已经变了，如图1-2：</p>
<p><img src="https://gitee.com/link_chm/img/raw/master/246101371-efef1c942e0efa4c_fix732.png" alt="246101371-efef1c942e0efa4c_fix732"></p>
<p>注意，如果只是修改了当前session的隔离级别，则换一个session之后，隔离级别又会恢复到默认的隔离级别，所以我们测试时，修改当前session的隔离级别即可。</p>
<h4 id="1-2-2-READ-UNCOMMITTED"><a href="#1-2-2-READ-UNCOMMITTED" class="headerlink" title="1.2.2 READ UNCOMMITTED"></a>1.2.2 READ UNCOMMITTED</h4><h5 id="1-2-2-1-准备测试数据"><a href="#1-2-2-1-准备测试数据" class="headerlink" title="1.2.2.1 准备测试数据"></a>1.2.2.1 准备测试数据</h5><p>READ UNCOMMITTED 是最低隔离级别，这种隔离级别中存在<strong>脏读、不可重复读以及幻象读</strong>问题，所以这里我们先来看这个隔离级别，借此大家可以搞懂这三个问题到底是怎么回事。</p>
<p>下面分别予以介绍。</p>
<p>首先创建一个简单的表，预设两条数据，如下：</p>
<p><img src="https://gitee.com/link_chm/img/raw/master/288922603-493628ad4406c819_fix732.png" alt="288922603-493628ad4406c819_fix732"></p>
<p>表的数据很简单，有javaboy和itboyhub两个用户，两个人的账户各有1000元人民币。现在模拟这两个用户之间的一个转账操作。</p>
<p>注意，如果读者使用的是navicat的话，不同的查询窗口就对应了不同的session，如果读者使用了sqlyog的话，不同的查询窗口对应同一个session，因此如果使用sqlyog，需要读者再开启一个新的连接，在新的连接中进行查询操作。</p>
<h5 id="1-2-2-2-脏读"><a href="#1-2-2-2-脏读" class="headerlink" title="1.2.2.2 脏读"></a>1.2.2.2 脏读</h5><p>一个事务读到另外一个事务还没有提交的数据，称之为脏读。具体操作如下：</p>
<ol>
<li>首先打开两个SQL操作窗口，假设分别为 A 和 B，在 A 窗口中输入如下几条 SQL （输入完成后不用执行）：</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot-mybatisplus多数据源切换</title>
    <url>/2021/12/16/springboot-mybatisplus%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<html><head></head><body></body></html><html><head></head><body><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">多数据源的配置，大多数情况下是用在读写库或主从库之间自由切换，或者业务上需要切换数据源</span><br></pre></td></tr></tbody></table></figure>

<h4 id="一、pom文件引入相关jar包"><a href="#一、pom文件引入相关jar包" class="headerlink" title="一、pom文件引入相关jar包"></a>一、pom文件引入相关jar包</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mybatis-plus 持久层--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--swagger2 相关依赖--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="二、application-yml设置"><a href="#二、application-yml设置" class="headerlink" title="二、application.yml设置"></a>二、application.yml设置</h4><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 数据库驱动</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">db1:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/db1?serverTimezone=GMT&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">db2:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/db2?serverTimezone=GMT&amp;useSSL=false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/db</span></span><br><span class="line"><span class="comment"># 指定Mybatis的Mapper文件</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mappers/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.atguigu.mscloud</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志配置</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:logback.xml</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="三、相关编码"><a href="#三、相关编码" class="headerlink" title="三、相关编码"></a>三、相关编码</h4><h4 id="3-1-设置数据源类型"><a href="#3-1-设置数据源类型" class="headerlink" title="3.1 设置数据源类型"></a>3.1 设置数据源类型</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">DataSourceType</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//NONE用来返回默认</span></span><br><span class="line">    NONE(<span class="string">""</span>),</span><br><span class="line">    DB1(<span class="string">"db1"</span>),</span><br><span class="line">    DB2(<span class="string">"db2"</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String database;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDatabase</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> database;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDatabase</span><span class="params">(String database)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.database = database;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    DataSourceType(String database) {</span><br><span class="line">        <span class="keyword">this</span>.database = database;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="3-2-本地数据源设置"><a href="#3-2-本地数据源设置" class="headerlink" title="3.2 本地数据源设置"></a>3.2 本地数据源设置</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceUtil</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DataSourceType&gt; localDataSource = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataSourceUtil</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSourceType <span class="title">get</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> localDataSource.get();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(DataSourceType type)</span></span>{</span><br><span class="line">        localDataSource.set(type);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>{</span><br><span class="line">        localDataSource.remove();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="3-3-mybatisplus设置"><a href="#3-3-mybatisplus设置" class="headerlink" title="3.3 mybatisplus设置"></a>3.3 mybatisplus设置</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan("com.atguigu.mscloud.mapper")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean("db1")</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = "spring.datasource.db1")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource1</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean("db2")</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = "spring.datasource.db2")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource2</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DynamicDataSource <span class="title">dynamicDataSource</span><span class="params">(<span class="meta">@Qualifier("db1")</span> DataSource db1,<span class="meta">@Qualifier("db2")</span> DataSource db2)</span></span>{</span><br><span class="line">        Map&lt;Object, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(DataSourceType.DB1.getDatabase(),db1);</span><br><span class="line">        map.put(DataSourceType.DB2.getDatabase(),db2);</span><br><span class="line"></span><br><span class="line">        DynamicDataSource dynamicDataSource = <span class="keyword">new</span> DynamicDataSource();</span><br><span class="line">        dynamicDataSource.setTargetDataSources(map);</span><br><span class="line">        <span class="comment">//设置默认数据库, 选择的数据库Bean注入时要带@Primary注释</span></span><br><span class="line">        dynamicDataSource.setDefaultTargetDataSource(db1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dynamicDataSource;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">(DynamicDataSource dynamicDataSource)</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">        MybatisSqlSessionFactoryBean factory = <span class="keyword">new</span> MybatisSqlSessionFactoryBean();</span><br><span class="line">        factory.setDataSource(dynamicDataSource);</span><br><span class="line"></span><br><span class="line">        Resource[] resources = <span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">"classpath:mappers/*.xml"</span>);</span><br><span class="line">        factory.setMapperLocations(resources);</span><br><span class="line">        <span class="keyword">return</span> factory.getObject();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">(DynamicDataSource dynamicDataSource)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dynamicDataSource);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="3-4-动态路由数据源的核心类"><a href="#3-4-动态路由数据源的核心类" class="headerlink" title="3.4 动态路由数据源的核心类"></a>3.4 动态路由数据源的核心类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DynamicDataSource.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>{</span><br><span class="line">        String database = DataSourceUtil.get() == <span class="keyword">null</span> ? <span class="keyword">null</span> : DataSourceUtil.get().getDatabase();</span><br><span class="line">        logger.info(<span class="string">"DynamicDataSource, 动态数据源返回={}"</span>, database);</span><br><span class="line">        <span class="keyword">return</span> database;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="3-5-数据源切换注解"><a href="#3-5-数据源切换注解" class="headerlink" title="3.5 数据源切换注解"></a>3.5 数据源切换注解</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DataSource {</span><br><span class="line"></span><br><span class="line">    <span class="function">DataSourceType <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> DataSourceType.NONE</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="3-6-数据源切面类"><a href="#3-6-数据源切面类" class="headerlink" title="3.6 数据源切面类"></a>3.6 数据源切面类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceAspect</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DataSourceAspect.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut("@annotation(com.atguigu.mscloud.config.DataSource)")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Around("pointCut()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint point)</span></span>{</span><br><span class="line">        DataSourceType dataSourceType = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        MethodSignature signature = (MethodSignature) point.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line"></span><br><span class="line">        DataSource dynamicDataSource  = method.getAnnotation(DataSource.class);</span><br><span class="line">        String path = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(dynamicDataSource.value().getDatabase()!=<span class="keyword">null</span> &amp;&amp; dynamicDataSource.value()!= DataSourceType.NONE){</span><br><span class="line">            dataSourceType = dynamicDataSource.value();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dataSourceType == <span class="keyword">null</span>){</span><br><span class="line">            HttpServletRequest request = ((ServletRequestAttributes) Objects.requireNonNull(RequestContextHolder.getRequestAttributes())).getRequest();</span><br><span class="line">            path = request.getRequestURI().toString();</span><br><span class="line">            <span class="keyword">if</span>(path.contains(DataSourceType.DB1.getDatabase())){</span><br><span class="line">                dataSourceType = DataSourceType.DB1;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(path.contains(DataSourceType.DB2.getDatabase())){</span><br><span class="line">                dataSourceType = DataSourceType.DB2;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"DataSource, 方法={}, 数据源={}, 路径={}, 注释自带数据源={}"</span>,</span><br><span class="line">                method.getName(), dataSourceType==<span class="keyword">null</span> ? <span class="keyword">null</span> : dataSourceType.getDatabase(),</span><br><span class="line">                path, dynamicDataSource.value());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dataSourceType == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"非法数据源"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        DataSourceUtil.set(dataSourceType);</span><br><span class="line"></span><br><span class="line">        Object result  = point.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清除数据库</span></span><br><span class="line">        logger.info(<span class="string">"DataSource, 清除数据源, 方法={}, 数据源={}, 路径={}, 注释自带数据源={}"</span>,</span><br><span class="line">                method.getName(), dataSourceType.getDatabase(),</span><br><span class="line">                path, dynamicDataSource.value());</span><br><span class="line">        DataSourceUtil.remove();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="四、数据源切换测试"><a href="#四、数据源切换测试" class="headerlink" title="四、数据源切换测试"></a>四、数据源切换测试</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/test")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(TestController.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BaseTabService baseTabService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataSource(value = DataSourceType.DB2)</span></span><br><span class="line">    <span class="meta">@GetMapping("/queryById/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">selectById</span><span class="params">(<span class="meta">@PathVariable("id")</span> Long id)</span> </span>{</span><br><span class="line">        BaseTab entity;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            entity = baseTabService.getById(id);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            logger.error(<span class="string">"查询异常, 错误={}"</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.badRequest().body(<span class="string">"查询异常"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(entity);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@DataSource(DataSourceType.DB2)</span></span><br><span class="line">    <span class="meta">@GetMapping("/queryByIda/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">selectByIda</span><span class="params">(<span class="meta">@PathVariable("id")</span> Long id)</span></span>{</span><br><span class="line">        logger.info(<span class="string">"1.basTable={}"</span>, DataSourceUtil.get());</span><br><span class="line">        <span class="comment">//线程池, 模拟要在多线程环境下进行的业务动作</span></span><br><span class="line">        ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line">        Future&lt;BaseTab&gt; future;</span><br><span class="line">        BaseTab entity;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            future = newCachedThreadPool.submit(() -&gt; {</span><br><span class="line">                logger.info(<span class="string">"2.basTable={}"</span>, DataSourceUtil.get());</span><br><span class="line">                <span class="keyword">return</span> baseTabService.getById(id);</span><br><span class="line">            });</span><br><span class="line">        }<span class="keyword">catch</span> (Exception e){</span><br><span class="line">            logger.error(<span class="string">"查询异常, 错误={}"</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.badRequest().body(<span class="string">"查询异常"</span>);</span><br><span class="line">        }</span><br><span class="line">        logger.info(<span class="string">"3.basTable={}"</span>, DataSourceUtil.get());</span><br><span class="line">        entity = future.get();</span><br><span class="line">        newCachedThreadPool.shutdown();</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(entity);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@DataSource(DataSourceType.DB2)</span></span><br><span class="line">    <span class="meta">@GetMapping("/queryByIdt/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">selectByIdt</span><span class="params">(<span class="meta">@PathVariable("id")</span> Long id)</span></span>{</span><br><span class="line">        <span class="comment">//获取数据源</span></span><br><span class="line">        DataSourceType type = DataSourceUtil.get();<span class="comment">//****核心代码1****</span></span><br><span class="line">        logger.info(<span class="string">"1.basTable={}"</span>, type);</span><br><span class="line">        <span class="comment">//线程池, 模拟要在多线程环境下进行的业务动作</span></span><br><span class="line">        ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line">        Future&lt;BaseTab&gt; future;</span><br><span class="line">        BaseTab entity;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            future = newCachedThreadPool.submit(() -&gt; {</span><br><span class="line">                <span class="comment">//进入新线程, 传递数据源</span></span><br><span class="line">                DataSourceUtil.set(type);<span class="comment">//****核心代码2****</span></span><br><span class="line">                logger.info(<span class="string">"2.basTable={}"</span>, DataSourceUtil.get());</span><br><span class="line">                <span class="keyword">return</span> baseTabService.getById(id);</span><br><span class="line">            });</span><br><span class="line">        }<span class="keyword">catch</span> (Exception e){</span><br><span class="line">            logger.error(<span class="string">"查询异常, 错误={}"</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.badRequest().body(<span class="string">"查询异常"</span>);</span><br><span class="line">        }</span><br><span class="line">        logger.info(<span class="string">"3.basTable={}"</span>, DataSourceUtil.get());</span><br><span class="line">        entity = future.get();</span><br><span class="line">        newCachedThreadPool.shutdown();</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(entity);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@GetMapping("/changeDb")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">changeDb</span><span class="params">()</span></span>{</span><br><span class="line">        BaseTab baseTab2 = baseTabService.selectById2();</span><br><span class="line">        logger.info(<span class="string">"db2:{}"</span>,baseTab2);</span><br><span class="line">        BaseTab baseTab = baseTabService.selectById();</span><br><span class="line">        logger.info(<span class="string">"db1:{}"</span>,baseTab);</span><br><span class="line">        baseTabService.selectById();</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">"数据源同一事务内切换"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://gitee.com/link_chm/img/raw/master/image-20211216155433854.png" alt="image-20211216155433854"></p>
<p><img src="https://gitee.com/link_chm/img/raw/master/image-20211216155538421.png" alt="image-20211216155538421"></p>
<p><img src="https://gitee.com/link_chm/img/raw/master/image-20211216155510513.png" alt="image-20211216155510513"></p>
<p><img src="https://gitee.com/link_chm/img/raw/master/image-20211216155558707.png" alt="image-20211216155558707"></p>
</body></html>]]></content>
      <categories>
        <category>mybatisplus</category>
      </categories>
      <tags>
        <tag>多数据源</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+Jasypt加密</title>
    <url>/2021/11/30/springboot-Jasypt%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<html><head></head><body></body></html><html><head></head><body><h4 id="pom引入jasypt包"><a href="#pom引入jasypt包" class="headerlink" title="pom引入jasypt包"></a>pom引入jasypt包</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="创建加密类，编写加密方法"><a href="#创建加密类，编写加密方法" class="headerlink" title="创建加密类，编写加密方法"></a>创建加密类，编写加密方法</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jasyptTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jasypt.util.text.BasicTextEncryptor;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest(classes = {JasyptTestApplication.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncryptionTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">databaseEncryptionTest</span><span class="params">()</span> </span>{</span><br><span class="line">        BasicTextEncryptor textEncryptor = <span class="keyword">new</span> BasicTextEncryptor();</span><br><span class="line">                <span class="comment">//加密所需的salt(盐)</span></span><br><span class="line">                textEncryptor.setPassword(<span class="string">"myApplicationSalt"</span>);</span><br><span class="line">                <span class="comment">//要加密的数据（数据库的用户名或密码）</span></span><br><span class="line">               String username = textEncryptor.encrypt(<span class="string">"root"</span>);</span><br><span class="line">               String password = textEncryptor.encrypt(<span class="string">"1AmP@ssw0rd"</span>);</span><br><span class="line">               log.info(<span class="string">"db username:"</span>+username);</span><br><span class="line">               log.info(<span class="string">"db password:"</span>+password);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="执行方法，得到加密字符串"><a href="#执行方法，得到加密字符串" class="headerlink" title="执行方法，得到加密字符串"></a>执行方法，得到加密字符串</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">[cn.jasyptTest <span class="number">2021</span>-<span class="number">03</span>-<span class="number">23</span> <span class="number">11</span>:<span class="number">17</span>:<span class="number">06</span><span class="number">.848</span>] INFO  Method: databaseEncryptionTest(Line <span class="number">21</span>) - db username:eLQMldjd8M/7qCMZZ6z0vg==</span><br><span class="line">[cn.jasyptTest <span class="number">2021</span>-<span class="number">03</span>-<span class="number">23</span> <span class="number">11</span>:<span class="number">17</span>:<span class="number">06</span><span class="number">.848</span>] INFO  Method: databaseEncryptionTest(Line <span class="number">22</span>) - db password:Hvvbp6fdZWfOUjUMaJWPExdWrQLcm7Wv</span><br></pre></td></tr></tbody></table></figure>

<h4 id="将密文写入配置文件，程序会自动解密"><a href="#将密文写入配置文件，程序会自动解密" class="headerlink" title="将密文写入配置文件，程序会自动解密"></a>将密文写入配置文件，程序会自动解密</h4><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">jasypt.encryptor.password</span>= <span class="string">myApplicationSalt</span></span><br><span class="line"><span class="meta">spring.datasource.username</span> = <span class="string">ENC(eLQMldjd8M/7qCMZZ6z0vg==)</span></span><br><span class="line"><span class="meta">spring.datasource.password</span> = <span class="string">ENC(Hvvbp6fdZWfOUjUMaJWPExdWrQLcm7Wv)</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="生产环境直接将盐值写在配置文件会有安全风险，可以选择在启动程序时带入"><a href="#生产环境直接将盐值写在配置文件会有安全风险，可以选择在启动程序时带入" class="headerlink" title="生产环境直接将盐值写在配置文件会有安全风险，可以选择在启动程序时带入"></a>生产环境直接将盐值写在配置文件会有安全风险，可以选择在启动程序时带入</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">java -jar -Djasypt.encryptor.password=myApplicationSalt HelloWorld/target/helloWorld-server-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>jasypt</category>
      </categories>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>感悟记录</title>
    <url>/2022/01/30/%E6%84%9F%E6%82%9F%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<html><head></head><body></body></html><html><head></head><body><h4 id="一、如何变得自信，走出自卑自欺的状态？"><a href="#一、如何变得自信，走出自卑自欺的状态？" class="headerlink" title="一、如何变得自信，走出自卑自欺的状态？"></a>一、如何变得自信，走出自卑自欺的状态？</h4><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">1、保持良好的睡眠，给身体充足的休息。</span><br><span class="line">2、睡前泡脚。</span><br><span class="line">3、坚持吃素，饮食清淡，可以给身体排毒。</span><br><span class="line">4、少用电脑、手机，减少精气的消耗。</span><br><span class="line">5、多喝水、多运动。</span><br><span class="line">6、坚持控制遗精、不看颜色新闻、视频等。</span><br><span class="line">7、保持良好的心态。</span><br></pre></td></tr></tbody></table></figure>

<h4 id="二、强大源自于心"><a href="#二、强大源自于心" class="headerlink" title="二、强大源自于心"></a>二、强大源自于心</h4><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">1、心是力量的源泉，如果自己把自己看得一无是处，又如何能够指望自己成功，就是机会来了也会自我放弃。</span><br><span class="line">2、保持元神附体、不要心猿意马、神不守舍、魂不附体等，坚持下去。</span><br><span class="line">3、最好的解压方式就是找事做，让自己忙起来，这样烦恼啥的自然也就忘掉了。</span><br></pre></td></tr></tbody></table></figure>

<h4 id="三、尝试解决欲望与道德的关系，让扭曲的心态摆正"><a href="#三、尝试解决欲望与道德的关系，让扭曲的心态摆正" class="headerlink" title="三、尝试解决欲望与道德的关系，让扭曲的心态摆正"></a>三、尝试解决欲望与道德的关系，让扭曲的心态摆正</h4><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">生活中常常出现与自己内心相互违背的道德问题，但是欲望是人之常情，并且草木，也非圣贤，所以也不要因为欲望而谴责、攻击自己。要认识到人都要两面性，有正直的一面，也有不堪的一面，不要要求做什么十全十美的人，不要让道德与欲望的冲突而扭曲了自己的心灵</span><br></pre></td></tr></tbody></table></figure>

<h4 id="四、煤气灯效应与心理投射"><a href="#四、煤气灯效应与心理投射" class="headerlink" title="四、煤气灯效应与心理投射"></a>四、煤气灯效应与心理投射</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">先是怀疑与否定，然后心理聚焦于上，之后不断被验证，然后就会真的觉得自己有问题，不断循环。</span><br><span class="line">走出去的办法就是无与伦比的自信，当自信自己不存在这个问题，心结自然释然，也就不存在所谓的问题。</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>感悟</category>
      </categories>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot-redis实现分布式缓存</title>
    <url>/2021/11/29/springboot-redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<html><head></head><body></body></html><html><head></head><body><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">指程序或系统中常用的数据对象存储在像内存这样特定的介质中，以避免在每次程序调用时，重新创建或组织数据所带来的性能损耗，从而提高了系统的整体运行速度。用户的请求一般会经过缓存系统，如果缓存系统中没有相关数据，就会在其他系统中查询相应的数据并保存在缓存中，最后返回给调用方。</span><br></pre></td></tr></tbody></table></figure>

<h4 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">指程序级别的缓存组件，它的特点是本地缓存和应用程序会运行在同一个进程中，所以本地缓存的操作会非常快，因为在同一个进程内也意味着不会有网络上的延迟和开销。</span><br><span class="line">本地缓存适用于单节点非集群的应用场景，它的优点是快，缺点是多程序无法共享缓存，比如分布式用户 Session 会话信息保存，由于每次用户访问的服务器可能是不同的，如果不能共享缓存，那么就意味着每次的请求操作都有可能被系统阻止，因为会话信息只保存在某一个服务器上，当请求没有被转发到这台存储了用户信息的服务器时，就会被认为是非登录的违规操作。</span><br><span class="line">除此之外，无法共享缓存可能会造成系统资源的浪费，这是因为每个系统都单独维护了一份属于自己的缓存，而同一份缓存有可能被多个系统单独进行存储，从而浪费了系统资源。</span><br></pre></td></tr></tbody></table></figure>

<h4 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h4><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">指将应用系统和缓存组件进行分离的缓存机制，这样多个应用系统就可以共享一套缓存数据了，它的特点是共享缓存服务和可集群部署，为缓存系统提供了高可用的运行环境，以及缓存共享的程序运行机制。</span><br><span class="line">本地缓存可以使用EhCache 和 Google 的 Guava来实现，而分布式缓存可以使用 Redis 或 Memcached 来实现。</span><br><span class="line">由于 Redis 本身就是独立的缓存系统，因此可以作为第三方来提供共享的数据缓存，而 Redis 的分布式支持主从、哨兵和集群的模式，所以它就可以支持分布式的缓存，而 Memcached 的情况也是类似的。</span><br></pre></td></tr></tbody></table></figure>

<h4 id="分布式缓存常见文件及解决方案"><a href="#分布式缓存常见文件及解决方案" class="headerlink" title="分布式缓存常见文件及解决方案"></a>分布式缓存常见文件及解决方案</h4><figure class="highlight mathematica"><table><tbody><tr><td class="code"><pre><span class="line">分布式缓存设计的核心问题是以哪种方式进行缓存预热和缓存更新， 以及如何优雅解决缓存雪崩、缓存穿透、缓存降级等问题。这些问题在不 同的应用场景下有不同的解决方案。</span><br><span class="line"></span><br><span class="line">缓存预热： 缓存预热指在用户请求数据前先将数据加载到缓存系统中，用户查询 事先被预热的缓存数据，以提高系统查询效率。缓存预热一般有系统启动 加载、定时加载等方式。</span><br><span class="line"></span><br><span class="line">缓存更新<span class="operator">:</span> 缓存更新指在数据发生变化后及时将变化后的数据更新到缓存中。常 见的缓存更新策略有以下<span class="number">4</span>种。</span><br><span class="line"></span><br><span class="line"> 定时更新：定时将底层数据库内的数据更新到缓存中，该方法比较 简单，适合需要缓存的数据量不是很大的应用场景。</span><br><span class="line">过期更新：定时将缓存中过期的数据更新为最新数据并更新缓存的 过期时间。</span><br><span class="line">写请求更新：在用户有写请求时先写数据库同时更新缓存，这适用 于用户对缓存数据和数据库的数据有实时强一致性要求的情况。</span><br><span class="line"> 读请求更新：在用户有读请求时，先判断该请求数据的缓存是否存 在或过期，如果不存在或已过期，则进行底层数据库查询并将查询结果更 新到缓存中，同时将查询结果返回给用户。</span><br><span class="line">缓存淘汰策略 在缓存数据过多时需要使用某种淘汰算法决定淘汰哪些数据。常用的 淘汰算法有以下几种。</span><br><span class="line"></span><br><span class="line"> <span class="variable">FIFO</span>（<span class="built_in">First</span> <span class="built_in">In</span> <span class="built_in">First</span> <span class="built_in">Out</span>，先进先出）：判断被存储的时间，离 目前最远的数据优先被淘汰。</span><br><span class="line"> <span class="variable">LRU</span>（<span class="variable">Least</span> <span class="variable">Recently</span> <span class="variable">Used</span>，最近最少使用）：判断缓存最近被使 用的时间，距离当前时间最远的数据优先被淘汰。</span><br><span class="line"> <span class="variable">LFU</span>（<span class="variable">Least</span> <span class="variable">Frequently</span> <span class="variable">Used</span>，最不经常使用）：在一段时间内， 被使用次数最少的缓存优先被淘汰。</span><br></pre></td></tr></tbody></table></figure>

<h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a><strong>缓存雪崩</strong></h4><figure class="highlight x86asm"><table><tbody><tr><td class="code"><pre><span class="line">缓存雪崩指在同一时刻由于大量缓存失效，导致大量原本应该访问缓 存的请求都去查询数据库，而对数据库的<span class="meta">CPU</span>和内存造成巨大压力，严重的 话会导致数据库宕机，从而形成一系列连锁反应，使整个系统崩溃。</span><br><span class="line"></span><br><span class="line">解决方案：</span><br><span class="line"></span><br><span class="line">◎ 请求加锁：对于并发量不是很多的应用，使用请求加锁排队的方案 防止过多请求数据库。</span><br><span class="line"></span><br><span class="line">◎ 失效更新：为每一个缓存数据都增加过期标记来记录缓存数据是否 失效，如果缓存标记失效，则更新数据缓存。</span><br><span class="line"></span><br><span class="line">◎ 缓存数据的过期时间设置随机：为不同的数据设置不同的缓存失效时间，防止在同一时刻有大量的数据失效。</span><br><span class="line"></span><br><span class="line">◎如果缓存数据库是分布式部署，将热点数据均匀分布在不同的缓存数据库中。</span><br><span class="line"></span><br><span class="line">◎设置热点数据永远不过期。</span><br></pre></td></tr></tbody></table></figure>

<h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a><strong>缓存穿透</strong></h4><figure class="highlight lasso"><table><tbody><tr><td class="code"><pre><span class="line">缓存穿透指由于缓存系统故障或者用户频繁查询系统中不存在（在系 统中不存在，在自然数据库和缓存中都不存在）的数据，而这时请求穿过 缓存不断被发送到数据库，导致数据库过载，进而引发一连串并发问题。 比如用户发起一个userName为zhangsan的请求，而在系统中并没有名 为zhangsan的用户，这样就导致每次查询时在缓存中都找不到该数据，然 后去数据库中再查询一遍。由于zhangsan用户本身在系统中不存在，自然 返回空，导致请求穿过缓存频繁查询数据库，在用户频繁发送该请求时将 导致数据库系统负载增大，从而可能引发其他问题。常用的解决缓存穿透 问题的方法有布隆过滤器和<span class="keyword">cache</span> <span class="built_in">null</span>策略。</span><br><span class="line"></span><br><span class="line">解决方案：</span><br><span class="line"></span><br><span class="line">◎接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;=<span class="number">0</span>的直接拦截，一定不存在的不去查询数据库。</span><br><span class="line"></span><br><span class="line">◎ 布隆过滤器：指将所有可能存在的数据都映射到一个足够大的 Bitmap中，在用户发起请求时首先经过布隆过滤器的拦截，一个一定不存 在的数据会被这个布隆过滤器拦截，从而避免对底层存储系统带来查询上 的压力。</span><br><span class="line"></span><br><span class="line">◎ <span class="keyword">cache</span> <span class="built_in">null</span>策略：指如果一个查询返回的结果为<span class="built_in">null</span>（可能是数据 不存在，也可能是系统故障），我们仍然缓存这个<span class="built_in">null</span>结果，但它的过期 时间会很短，通常不超过 <span class="number">5</span> 分钟；在用户再次请求该数据时直接返回 <span class="built_in">null</span>，而不会继续访问数据库，从而有效保障数据库的安全。其实<span class="keyword">cache</span> <span class="built_in">null</span>策略的核心原理是：在缓存中记录一个短暂的（数据过期时间内）数 据在系统中是否存在的状态，如果不存在，则直接返回<span class="built_in">null</span>，不再查询数 据库，从而避免缓存穿透到数据库上。</span><br></pre></td></tr></tbody></table></figure>

<h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a><strong>缓存击穿</strong></h4><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力</span><br><span class="line"></span><br><span class="line">解决方案：</span><br><span class="line"></span><br><span class="line">◎ 设置热点数据永远不过期。</span><br><span class="line"></span><br><span class="line">◎ 加互斥锁。</span><br></pre></td></tr></tbody></table></figure>

<h4 id="缓存降级"><a href="#缓存降级" class="headerlink" title="缓存降级"></a><strong>缓存降级</strong></h4><figure class="highlight lasso"><table><tbody><tr><td class="code"><pre><span class="line">缓存降级指由于访问量剧增导致服务出现问题（如响应时间慢或不响 应）时，优先保障核心业务的运行，减少或关闭非核心业务对资源的使 用。</span><br><span class="line"></span><br><span class="line">服务降级策略：</span><br><span class="line"></span><br><span class="line">◎ 写降级：在写请求增大时，可以只进行<span class="keyword">Cache</span>的更新，然后将数据 异步更新到数据库中，保证最终一致性即可，即将写请求从数据库降级为 <span class="keyword">Cache</span>。</span><br><span class="line"></span><br><span class="line">◎ 读降级：在数据库服务负载过高或数据库系统故障时，可以只对 <span class="keyword">Cache</span>进行读取并将结果返回给用户，在数据库服务正常后再去查询数据 库，即将读请求从数据库降级为<span class="keyword">Cache</span>。这种方式适用于对数据实时性要求 不高的场景，保障了在系统发生故障的情况下用户依然能够访问到数据， 只是访问到的数据相对有延迟。</span><br></pre></td></tr></tbody></table></figure>

<h4 id="一、在pom中添加依赖"><a href="#一、在pom中添加依赖" class="headerlink" title="一、在pom中添加依赖"></a>一、在pom中添加依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--springboot redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="二、在配置文件中配置Redis连接"><a href="#二、在配置文件中配置Redis连接" class="headerlink" title="二、在配置文件中配置Redis连接"></a>二、在配置文件中配置Redis连接</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    database: 0</span><br><span class="line">    host: 172.28.68.151</span><br><span class="line">    port: 6379</span><br><span class="line">    password: YYES@ceshi2019</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-idle: 10</span><br><span class="line">        max-wait: 3000</span><br><span class="line">        min-idle: 0</span><br><span class="line">    timeout: 3000</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 7778</span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /vi2</span><br></pre></td></tr></tbody></table></figure>

<h4 id="三、编写Redis配置文件"><a href="#三、编写Redis配置文件" class="headerlink" title="三、编写Redis配置文件"></a>三、编写Redis配置文件</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressWarnings("rawtypes")</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisTemplate redisTemplate)</span> </span>{</span><br><span class="line">        RedisCacheManager rcm = <span class="keyword">new</span> RedisCacheManager(redisTemplate);</span><br><span class="line">        <span class="comment">// 多个缓存的名称,目前只定义了一个</span></span><br><span class="line">        rcm.setCacheNames(Arrays.asList(<span class="string">"thisredis"</span>));</span><br><span class="line">        <span class="comment">//设置缓存过期时间(秒)</span></span><br><span class="line">        rcm.setDefaultExpiration(<span class="number">600</span>);</span><br><span class="line">        <span class="keyword">return</span> rcm;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">restTemplate</span><span class="params">(RedisConnectionFactory factory)</span></span>{</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">// 序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; serializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">        ObjectMapper obj = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常</span></span><br><span class="line">        obj.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常</span></span><br><span class="line">        obj.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        serializer.setObjectMapper(obj);</span><br><span class="line">        <span class="comment">//值使用json序列化</span></span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line">        <span class="comment">//使用StringRedisSerialize来序列化与反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">//设置hash模式的key与value序列化模式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="四、测试Redis缓存"><a href="#四、测试Redis缓存" class="headerlink" title="四、测试Redis缓存"></a>四、测试Redis缓存</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/redis")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OyRedisController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 依赖注入，注入redisTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试redis string add</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/string/add")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addStringKeyValue</span><span class="params">(<span class="meta">@RequestParam(value = "key", defaultValue = "key1")</span> String key, <span class="meta">@RequestParam(value = "value", defaultValue = "redis value")</span> String value)</span> </span>{</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">        <span class="keyword">return</span> (String) redisTemplate.opsForValue().get(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试redis string add</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/object/add")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">addObjectKeyValue</span><span class="params">(<span class="meta">@RequestParam(value = "key", defaultValue = "key1")</span> String key)</span> </span>{</span><br><span class="line">        OyUser user = <span class="keyword">new</span> OyUser(<span class="number">1</span>, <span class="string">"宋江"</span>, <span class="string">"18"</span>, <span class="string">"male"</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(key, user);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试redis string get</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/string/get")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getStringByKey</span><span class="params">(<span class="meta">@RequestParam(value = "key", defaultValue = "key1")</span> String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Cacheable(value="thisredis", key="'users_'+#id")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUser</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"hlhdidi"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123"</span>);</span><br><span class="line">        user.setUid(id.longValue());</span><br><span class="line">        System.out.println(<span class="string">"log4j2坏啦?"</span>);</span><br><span class="line">        logger.info(<span class="string">"输入user,用户名:{},密码:{}"</span>,user.getUsername(),user.getPassword());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@CacheEvict(value="thisredis", key="'users_'+#id",condition="#id!=1")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delUser</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="comment">// 删除user</span></span><br><span class="line">        System.out.println(<span class="string">"user删除"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分布式缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+redis接口限流</title>
    <url>/2021/11/30/springboot-redis%E6%8E%A5%E5%8F%A3%E9%99%90%E6%B5%81/</url>
    <content><![CDATA[<html><head></head><body></body></html><html><head></head><body><h2 id="一、SpringBoot中集成Redis"><a href="#一、SpringBoot中集成Redis" class="headerlink" title="一、SpringBoot中集成Redis"></a>一、SpringBoot中集成Redis</h2><h4 id="1-1-引入Redis依赖"><a href="#1-1-引入Redis依赖" class="headerlink" title="1.1 引入Redis依赖"></a>1.1 引入Redis依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--springboot redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="1-2-在application-yml中配置Redis"><a href="#1-2-在application-yml中配置Redis" class="headerlink" title="1.2 在application.yml中配置Redis"></a>1.2 在application.yml中配置Redis</h4><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">3</span> <span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># Redis服务器地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span> <span class="comment"># Redis服务器连接端口</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span> <span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">2000</span>  <span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">200</span>         <span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">20</span>         <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span>         <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span>       <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="1-3-配置RedisTemplate"><a href="#1-3-配置RedisTemplate" class="headerlink" title="1.3 配置RedisTemplate"></a>1.3 配置RedisTemplate</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: redis配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> oyc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/22 11:50 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>{</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RedisTemplate相关配置</span></span><br><span class="line"><span class="comment">     * 使redis支持插入对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 方法缓存 Methods the cache</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>{</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">// 配置连接工厂</span></span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">// 设置key的序列化器</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">// 设置value的序列化器</span></span><br><span class="line">        <span class="comment">//使用Jackson 2，将对象序列化为JSON</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        <span class="comment">//json转对象类，不设置默认的会将json转成hashmap</span></span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="二、实现限流"><a href="#二、实现限流" class="headerlink" title="二、实现限流"></a>二、实现限流</h2><h4 id="2-1-添加自定义AccessLimit注解"><a href="#2-1-添加自定义AccessLimit注解" class="headerlink" title="2.1 添加自定义AccessLimit注解"></a>2.1 添加自定义<code>AccessLimit</code>注解</h4><p>使用注解方式实现接口的限流操作，方便而优雅。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> oyc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/22 11:16 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target({ElementType.FIELD, ElementType.TYPE, ElementType.METHOD})</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AccessLimit {</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定second 时间内 API请求次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxCount</span><span class="params">()</span> <span class="keyword">default</span> 5</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求次数的指定时间范围  秒数(redis数据过期时间)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">second</span><span class="params">()</span> <span class="keyword">default</span> 60</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2-2-编写拦截器"><a href="#2-2-编写拦截器" class="headerlink" title="2.2 编写拦截器"></a>2.2 编写拦截器</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 访问拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> oyc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/22 11:20 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessLimitInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">try</span> {<span class="comment">// Handler 是否为 HandlerMethod 实例</span></span><br><span class="line">            <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) {</span><br><span class="line">                <span class="comment">// 强转</span></span><br><span class="line">                HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">                <span class="comment">// 获取方法</span></span><br><span class="line">                Method method = handlerMethod.getMethod();</span><br><span class="line">                <span class="comment">// 是否有AccessLimit注解</span></span><br><span class="line">                <span class="keyword">if</span> (!method.isAnnotationPresent(AccessLimit.class)) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 获取注解内容信息</span></span><br><span class="line">                AccessLimit accessLimit = method.getAnnotation(AccessLimit.class);</span><br><span class="line">                <span class="keyword">if</span> (accessLimit == <span class="keyword">null</span>) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">int</span> seconds = accessLimit.second();</span><br><span class="line">                <span class="keyword">int</span> maxCount = accessLimit.maxCount();</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 存储key</span></span><br><span class="line">                String key = request.getRemoteAddr() + <span class="string">":"</span> + request.getContextPath() + <span class="string">":"</span> + request.getServletPath();</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 已经访问的次数</span></span><br><span class="line">                Integer count = (Integer) redisTemplate.opsForValue().get(key);</span><br><span class="line">                System.out.println(<span class="string">"已经访问的次数:"</span> + count);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == count || -<span class="number">1</span> == count) {</span><br><span class="line">                    redisTemplate.opsForValue().set(key, <span class="number">1</span>, seconds, TimeUnit.SECONDS);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                }</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">if</span> (count &lt; maxCount) {</span><br><span class="line">                    redisTemplate.opsForValue().increment(key);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                }</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">if</span> (count &gt;= maxCount) {</span><br><span class="line">                    logger.warn(<span class="string">"请求过于频繁请稍后再试"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            logger.warn(<span class="string">"请求过于频繁请稍后再试"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2-3-注册拦截器并配置拦截路径和不拦截路径"><a href="#2-3-注册拦截器并配置拦截路径和不拦截路径" class="headerlink" title="2.3 注册拦截器并配置拦截路径和不拦截路径"></a>2.3 注册拦截器并配置拦截路径和不拦截路径</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 访问拦截器配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> oyc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/22 11:34 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntercepterConfig</span>  <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccessLimitInterceptor accessLimitInterceptor;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{</span><br><span class="line">        registry.addInterceptor(accessLimitInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/static/**"</span>,<span class="string">"/login.html"</span>,<span class="string">"/user/login"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2-4-使用AccessLimit"><a href="#2-4-使用AccessLimit" class="headerlink" title="2.4 使用AccessLimit"></a>2.4 使用AccessLimit</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> oyc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/22 11:36 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("access")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessLimitController</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 限流测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@AccessLimit(maxCount = 3,second = 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">limit</span><span class="params">(HttpServletRequest request)</span> </span>{</span><br><span class="line">        logger.error(<span class="string">"Access Limit Test"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"限流测试"</span>;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h4><p><img src="https://gitee.com/link_chm/img/raw/master/20201023002012599.png"></p>
</body></html>]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>限流</tag>
      </tags>
  </entry>
  <entry>
    <title>面试总结</title>
    <url>/2021/11/29/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<html><head></head><body></body></html><html><head></head><body><h4 id="String、StringBuilder、StringBuffer的区别"><a href="#String、StringBuilder、StringBuffer的区别" class="headerlink" title="String、StringBuilder、StringBuffer的区别"></a>String、StringBuilder、StringBuffer的区别</h4><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">String：引用数据类型，不可变字符序列</span><br><span class="line">StringBuilder：可变字符序列，效率高、线程不安全</span><br><span class="line">StringBuffer：可变字符序列，效率低、线程安全</span><br><span class="line">String在重新赋值之后，会重新创建新的字符串对象，频繁赋值，导致大量字符串对象存留在内存当中，严重影响程序的性能。</span><br><span class="line">使用场景：</span><br><span class="line">少量的字符串数据使用String，多线程大数据量使用StringBuffer，单线程大数据量使用StringBuilder。</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot-mybatisplus-swagger2集成</title>
    <url>/2021/12/07/springboot-mybatisplus-swagger2%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<html><head></head><body></body></html><html><head></head><body><h4 id="一、pom文件引入相关jar包"><a href="#一、pom文件引入相关jar包" class="headerlink" title="一、pom文件引入相关jar包"></a>一、pom文件引入相关jar包</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">guli.version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">guli.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">velocity.version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">velocity.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">swagger2.version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">swagger2.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aliyun.oss.version</span>&gt;</span>2.8.3<span class="tag">&lt;/<span class="name">aliyun.oss.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jodatime.version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">jodatime.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">poi.version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">poi.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-fileupload.version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">commons-fileupload.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-io.version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">commons-io.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">httpclient.version</span>&gt;</span>4.5.1<span class="tag">&lt;/<span class="name">httpclient.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jwt.version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">jwt.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.28<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gson.version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">gson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">json.version</span>&gt;</span>20170516<span class="tag">&lt;/<span class="name">json.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-dbutils.version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">commons-dbutils.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canal.client.version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">canal.client.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>zx<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cloud-alibaba.version</span>&gt;</span>0.2.2.RELEASE<span class="tag">&lt;/<span class="name">cloud-alibaba.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus 持久层--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mybatis-plus.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mysql.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${velocity.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日期时间工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${jodatime.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--xls--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${poi.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--xlsx--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${poi.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${commons-fileupload.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--commons-io--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${commons-io.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--httpclient--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${httpclient.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${gson.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- JWT --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${jwt.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--swagger2 相关依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${swagger2.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${swagger2.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${swagger2.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="二、新建application-yml文件"><a href="#二、新建application-yml文件" class="headerlink" title="二、新建application.yml文件"></a>二、新建application.yml文件</h4><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#服务器端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/api</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:com/wuhan/test/mapper/xml/*.xml</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/guli?serverTimezone=GMT&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">connection-test-query:</span> <span class="string">SELECT</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">idle-timeout:</span> <span class="number">500000</span></span><br><span class="line">      <span class="attr">max-lifetime:</span> <span class="number">540000</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">12</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">pool-name:</span> <span class="string">GuliHikariPool</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br></pre></td></tr></tbody></table></figure>

<p>三、新建logback.xml文件</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"10 seconds"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- de<span class="doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"./guli_log/edu"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- boldMagenta:粗红--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cyan:青色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- white:白色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">"%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>${CONSOLE_LOG_PATTERN}<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"INFO_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"WARN_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span>69</span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。</span></span><br><span class="line"><span class="comment">        &lt;logger&gt;仅有一个name属性，</span></span><br><span class="line"><span class="comment">        一个可选的level和一个可选的addtivity属性。</span></span><br><span class="line"><span class="comment">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span></span><br><span class="line"><span class="comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span></span><br><span class="line"><span class="comment">              如果未设置此属性，那么当前logger将会继承上级的级别。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span></span><br><span class="line"><span class="comment">        第一种把&lt;root level="INFO"&gt;改成&lt;root level="DEBUG"&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span></span><br><span class="line"><span class="comment">        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发环境:打印控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.guli"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span></span><br><span class="line"><span class="comment">            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG</span></span><br><span class="line"><span class="comment">            可以包含零个或多个appender元素。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--生产环境:输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"pro"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DEBUG_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="四、配置mybatisPlus新增数据注解类"><a href="#四、配置mybatisPlus新增数据注解类" class="headerlink" title="四、配置mybatisPlus新增数据注解类"></a>四、配置mybatisPlus新增数据注解类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuhan.test.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置mybatisPlus新增数据注解类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span></span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * insert注解设置默认值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"gmtCreate"</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"gmtModified"</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"cover"</span>,<span class="string">""</span>,metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"subjectParentId"</span>,<span class="string">""</span>,metaObject);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * update注解设置默认值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"gmtModified"</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="五、配置mybatisplus配置类"><a href="#五、配置mybatisplus配置类" class="headerlink" title="五、配置mybatisplus配置类"></a>五、配置mybatisplus配置类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuhan.test.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.ISqlInjector;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.injector.LogicSqlInjector;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PerformanceInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@MapperScan("com.wuhan.test.mapper")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SQL 执行性能分析插件</span></span><br><span class="line"><span class="comment">     * 开发环境使用，maxTime指的是sql的最大执行时长</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PerformanceInterceptor <span class="title">performanceInterceptor</span><span class="params">()</span></span>{</span><br><span class="line">        PerformanceInterceptor interceptor = <span class="keyword">new</span> PerformanceInterceptor();</span><br><span class="line">        interceptor.setMaxTime(<span class="number">5000</span>);  <span class="comment">//超过此处设置的时间sql不执行</span></span><br><span class="line">        interceptor.setFormat(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置逻辑删除bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">injector</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置分页插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="六、配置放行文件路径"><a href="#六、配置放行文件路径" class="headerlink" title="六、配置放行文件路径"></a>六、配置放行文件路径</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuhan.test.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.SpringfoxWebMvcConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(SpringfoxWebMvcConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span>  <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>{</span><br><span class="line">        registry.addResourceHandler(<span class="string">"doc.html"</span>).addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/webjars/**"</span>).addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="七、配置swagger2配置类"><a href="#七、配置swagger2配置类" class="headerlink" title="七、配置swagger2配置类"></a>七、配置swagger2配置类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuhan.test.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.xiaoymin.swaggerbootstrapui.annotations.EnableSwaggerBootstrapUI;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableSwaggerBootstrapUI</span></span><br><span class="line"><span class="meta">@ConditionalOnClass({Docket.class, ApiInfoBuilder.class})</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = "swagger", value = "enable", matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Configuration</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">""</span>)</span><br><span class="line">                .pathMapping(<span class="string">""</span>)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.wuhan.test"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构建 api文档的详细信息函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                <span class="comment">//页面标题</span></span><br><span class="line">                .title(<span class="string">"网站-课程中心API文档"</span>)</span><br><span class="line">                .description(<span class="string">"本文描述了课程中心微服务接口定义"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"Chm"</span>, <span class="string">"http://atguigu.com"</span>, <span class="string">"55317332@qq.com"</span>))</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="八、返回信息实体类"><a href="#八、返回信息实体类" class="headerlink" title="八、返回信息实体类"></a>八、返回信息实体类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuhan.test.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Link</span></span><br><span class="line"><span class="comment"> * 统一返回类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseResult</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty("是否成功")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty("返回码")</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty("返回消息")</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty("返回数据")</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ResponseResult</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">message</span><span class="params">(String message)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">code</span><span class="params">(Integer code)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setCode(code);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">success</span><span class="params">(Boolean success)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setSuccess(success);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">data</span><span class="params">(T data)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setData(data);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title">SUCCESS</span><span class="params">()</span></span>{</span><br><span class="line">        ResponseResult&lt;Object&gt; result = <span class="keyword">new</span> ResponseResult&lt;&gt;();</span><br><span class="line">        result.setSuccess(<span class="keyword">true</span>);</span><br><span class="line">        result.setCode(<span class="number">20000</span>);</span><br><span class="line">        result.setMessage(<span class="string">"成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title">ERROR</span><span class="params">()</span></span>{</span><br><span class="line">        ResponseResult&lt;Object&gt; result = <span class="keyword">new</span> ResponseResult&lt;&gt;();</span><br><span class="line">        result.setSuccess(<span class="keyword">false</span>);</span><br><span class="line">        result.setCode(<span class="number">20001</span>);</span><br><span class="line">        result.setMessage(<span class="string">"失败"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="九、自动生成代码配置类"><a href="#九、自动生成代码配置类" class="headerlink" title="九、自动生成代码配置类"></a>九、自动生成代码配置类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuhan.test.generater;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mybatisPlus代码生成器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建代码生成器7</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        <span class="comment">// 2、全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">        System.out.println(projectPath);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">"/src/main/java"</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">"chenhaiming"</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>); <span class="comment">//生成后是否打开资源管理器</span></span><br><span class="line">        gc.setFileOverride(<span class="keyword">false</span>); <span class="comment">//重新生成时文件是否覆盖</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * mp生成service层代码，默认接口名称第一个字母有 I</span></span><br><span class="line"><span class="comment">         * UcenterService</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        gc.setServiceName(<span class="string">"%sService"</span>); <span class="comment">//去掉Service接口的首字母I</span></span><br><span class="line">        gc.setIdType(IdType.ID_WORKER_STR); <span class="comment">//主键策略</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);<span class="comment">//定义生成的实体类中日期类型</span></span><br><span class="line">        gc.setSwagger2(<span class="keyword">true</span>);<span class="comment">//开启Swagger2模式</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line">        <span class="comment">// 3、数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">"jdbc:mysql://127.0.0.1:3306/crm?serverTimezone=GMT&amp;useSSL=false"</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line">        <span class="comment">// 4、包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setParent(<span class="string">"com.wuhan.test"</span>);</span><br><span class="line">        pc.setController(<span class="string">"controller"</span>);</span><br><span class="line">        pc.setEntity(<span class="string">"model"</span>);</span><br><span class="line">        pc.setService(<span class="string">"service"</span>);</span><br><span class="line">        pc.setMapper(<span class="string">"mapper"</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line">        <span class="comment">// 5、策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setInclude(<span class="string">"sys_dict"</span>);</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表映射到实体的命名策略</span></span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">"_"</span>); <span class="comment">//生成实体时去掉表前缀</span></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表字段映射到实体的命名策略</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>); <span class="comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>); <span class="comment">//restful api风格控制器</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>); <span class="comment">//url中驼峰转连字符</span></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        <span class="comment">// 6、执行</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="十、swagger2文档"><a href="#十、swagger2文档" class="headerlink" title="十、swagger2文档"></a>十、swagger2文档</h4><p><img src="https://gitee.com/link_chm/img/raw/master/image-20211207143112518.png" alt="image-20211207143112518"></p>
</body></html>]]></content>
      <categories>
        <category>mybatisplus</category>
      </categories>
      <tags>
        <tag>mybatisplus</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot-websocket消息通信</title>
    <url>/2021/12/07/springboot-websocket%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<html><head></head><body></body></html><html><head></head><body><h4 id="一、WebSocket简介"><a href="#一、WebSocket简介" class="headerlink" title="一、WebSocket简介"></a>一、WebSocket简介</h4><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"> 随着互联网的发展，传统的HTTP协议已经很难满足Web应用日益复杂的需求了。近年来，随着HTML5的诞生，WebSocket协议被提出，它实现了浏览器与服务器的全双工通信，扩展了浏览器与服务端的通信功能，使服务端也能主动向客户端发送数据。</span><br><span class="line"></span><br><span class="line">　　 传统的HTTP 协议是一种无状态的、无连接的、单向的应用层协议。它采用了请求/响应模型，通信请求只能由客户端发起，服务端对请求做出应答处理。每次请求（request）都要由客户端（如 浏览器）主动发起，服务端进行处理后返回response结果，而服务端很难主动向客户端发送数据；这种客户端是主动方，服务端是被动方的传统Web模式 对于信息变化不频繁的Web应用来说造成的麻烦较小，而对于涉及实时信息的Web应用却带来了很大的不便，如带有即时通信、实时数据、订阅推送等功能的应用。在WebSocket规范提出之前，开发人员若要实现这些实时性较强的功能，经常会使用折衷的解决方法：轮询（polling）和Comet技术。其实后者本质上也是一种轮询，只不过有所改进。</span><br><span class="line"></span><br><span class="line">　　轮询是最原始的实现实时Web应用的解决方案。轮询技术要求客户端以设定的时间间隔周期性地向服务端发送请求，频繁地查询是否有新的数据改动。明显地，这种方法会导致过多不必要的请求，浪费流量和服务器资源。</span><br><span class="line"></span><br><span class="line">　　Comet技术又可以分为长轮询和流技术。长轮询改进了上述的轮询技术，减小了无用的请求。它会为某些数据设定过期时间，当数据过期后才会向服务端发送请求；这种机制适合数据的改动不是特别频繁的情况。流技术通常是指客户端使用一个隐藏的窗口与服务端建立一个HTTP长连接，服务端会不断更新连接状态以保持HTTP长连接存活；这样的话，服务端就可以通过这条长连接主动将数据发送给客户端；流技术在大并发环境下，可能会考验到服务端的性能。</span><br><span class="line"></span><br><span class="line">　　这两种技术都是基于请求-应答模式，都不算是真正意义上的实时技术；它们的每一次请求、应答，都浪费了一定流量在相同的头部信息上，并且开发复杂度也较大。</span><br><span class="line"></span><br><span class="line">　　伴随着HTML5推出的WebSocket，真正实现了Web的实时通信，使B<span class="regexp">/S模式具备了C/</span>S模式的实时通信能力。 WebSocket其实是一个新协议，跟HTTP协议基本没有关系，只是为了兼容现有浏览器的握手规范而已，也就是说它是HTTP协议上的一种补充。WebSocket的工作流程是这样的：浏览器通过JavaScript向服务端发出建立WebSocket连接的请求，在WebSocket连接建立成功后，客户端和服务端就可以通过 TCP连接传输数据。因为WebSocket连接本质上是TCP连接，不需要每次传输都带上重复的头部数据，所以它的数据传输量比轮询和Comet技术小 了很多。</span><br><span class="line">　　</span><br><span class="line">总结：</span><br><span class="line"><span class="number">1</span>、WebSocket是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、当你获取 Web Socket 连接后，你可以通过 send() 方法来向服务器发送数据，并通过 onmessage 事件来接收服务器返回的数据。</span><br></pre></td></tr></tbody></table></figure>

<h4 id="二、深入连接WebSocket"><a href="#二、深入连接WebSocket" class="headerlink" title="二、深入连接WebSocket"></a>二、深入连接WebSocket</h4><h4 id="2-1-客户端"><a href="#2-1-客户端" class="headerlink" title="2.1 客户端"></a>2.1 客户端</h4><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Boot+WebSocket+广播式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"disconnect()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"color: #ff0000"</span>&gt;</span>貌似你的浏览器不支持websocket<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"connect"</span> <span class="attr">onclick</span>=<span class="string">"connect();"</span>&gt;</span>连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"disconnect"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span> <span class="attr">onclick</span>=<span class="string">"disconnect();"</span>&gt;</span>断开连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"conversationDiv"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>输入你的名字<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"sendName"</span> <span class="attr">onclick</span>=<span class="string">"sendName();"</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"response"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">src</span>=<span class="string">"http://localhost:8805/wuhan-firm/policy/findSpecificLoanList"</span> <span class="attr">data-value</span>=<span class="string">"文件"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"sockjs.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"stomp.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.4.0.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> stompClient = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">setConnected</span>(<span class="params">connected</span>) </span>{</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'connect'</span>).disabled = connected;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'disconnect'</span>).disabled = !connected;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'conversationDiv'</span>).style.visibility = connected ? <span class="string">'visible'</span> : <span class="string">'hidden'</span>;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#response'</span>).html();</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">        <span class="comment">// var url = "https://hrt.wuhan.gov.cn/firm/webSocket";</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> url = <span class="string">"http://localhost:8089/api/webSocket"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 连接 SockJs 的 endpoint 名称为 "/endpointNasus"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> socket = <span class="keyword">new</span> SockJS(url);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 使用 STOMP 子协议的 WebSocket 客户端</span></span></span><br><span class="line"><span class="javascript">        stompClient = Stomp.over(socket);</span></span><br><span class="line"><span class="javascript">        stompClient.connect({}, <span class="function"><span class="keyword">function</span>(<span class="params">frame</span>) </span>{</span></span><br><span class="line"><span class="javascript">            setConnected(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'Connected: '</span> + frame);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 通过 stompClient.subscribe 订阅 /nasus/getResponse 目标发送的信息，对应控制器的 SendTo 定义</span></span></span><br><span class="line"><span class="javascript">            stompClient.subscribe(<span class="string">'/topic/message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">respnose</span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(respnose);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 展示返回的信息，只要订阅了 /nasus/getResponse 目标，都可以接收到服务端返回的信息</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//showResponse(JSON.parse(respnose.body).responseMessage);</span></span></span><br><span class="line"><span class="javascript">            });</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> type=<span class="string">"1"</span>;</span></span><br><span class="line"><span class="javascript">            stompClient.subscribe(<span class="string">'/user/'</span>+type+<span class="string">'/message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">respnose</span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(respnose);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 展示返回的信息，只要订阅了 /nasus/getResponse 目标，都可以接收到服务端返回的信息</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//showResponse(JSON.parse(respnose.body).responseMessage);</span></span></span><br><span class="line"><span class="javascript">            });</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/* stompClient.subscribe('/topic/message',function (response) {</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 console.log(response);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             })*/</span></span></span><br><span class="line"><span class="javascript">        });</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">disconnect</span>(<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 断开连接</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (stompClient != <span class="literal">null</span>) {</span></span><br><span class="line"><span class="javascript">            stompClient.disconnect();</span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">        setConnected(<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"Disconnected"</span>);</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">sendName</span>(<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 向服务端发送消息</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> name = $(<span class="string">'#name'</span>).val();</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 通过 stompClient.send 向 /hello （服务端）发送信息，对应控制器 @MessageMapping 中的定义</span></span></span><br><span class="line"><span class="javascript">        stompClient.send(<span class="string">"/message/test"</span>, {}, <span class="built_in">JSON</span>.stringify({ <span class="string">'name'</span>: name }));</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">showResponse</span>(<span class="params">message</span>) </span>{</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 接收返回的消息</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> response = $(<span class="string">"#response"</span>);</span></span><br><span class="line"><span class="javascript">        response.html(message);</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">jquery-<span class="number">3.4</span>.<span class="number">0</span><span class="selector-class">.min</span><span class="selector-class">.js</span></span><br><span class="line">sockjs<span class="selector-class">.min</span><span class="selector-class">.js</span></span><br><span class="line">stomp<span class="selector-class">.min</span>.js</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2-2-WebSocket-服务端"><a href="#2-2-WebSocket-服务端" class="headerlink" title="2.2 WebSocket 服务端"></a>2.2 WebSocket 服务端</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuhan.test.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">消息体</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgVo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="2-3-redis相关配置"><a href="#2-3-redis相关配置" class="headerlink" title="2.3 redis相关配置"></a>2.3 redis相关配置</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuhan.test.websocket;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.assertj.core.util.Lists;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.PatternTopic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.Topic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.adapter.MessageListenerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: bigbao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/8/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${websocket.test.channel}")</span></span><br><span class="line">    <span class="keyword">private</span> String testchannel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">                                            MessageListenerAdapter listenerAdapter)</span> </span>{</span><br><span class="line">        RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">//添加消息监听器</span></span><br><span class="line">        List&lt;Topic&gt; list = Lists.newArrayList();</span><br><span class="line">        list.add(<span class="keyword">new</span> PatternTopic(testchannel));</span><br><span class="line">        container.addMessageListener(listenerAdapter, list);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MessageListenerAdapter <span class="title">listenerAdapter</span><span class="params">(MessageReceiver messageReceiver)</span> </span>{</span><br><span class="line">        MessageListenerAdapter messageListenerAdapter = <span class="keyword">new</span> MessageListenerAdapter(messageReceiver, <span class="string">"receiveMessage"</span>);</span><br><span class="line">        messageListenerAdapter.setSerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="keyword">return</span> messageListenerAdapter;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisConnectionFactory</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.factory = redisConnectionFactory;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">restTemplate</span><span class="params">()</span></span>{</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">// 序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; serializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">        ObjectMapper obj = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常</span></span><br><span class="line">        obj.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常</span></span><br><span class="line">        obj.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        serializer.setObjectMapper(obj);</span><br><span class="line">        <span class="comment">//值使用json序列化</span></span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line">        <span class="comment">//使用StringRedisSerialize来序列化与反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">//设置hash模式的key与value序列化模式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="2-4-websocket相关配置"><a href="#2-4-websocket相关配置" class="headerlink" title="2.4 websocket相关配置"></a>2.4 websocket相关配置</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuhan.test.websocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.config.MessageBrokerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.StompEndpointRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: bigbao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/8/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketMessageBrokerConfigurer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>{</span><br><span class="line">        registry.addEndpoint(<span class="string">"/webSocket"</span>)</span><br><span class="line">                <span class="comment">//支持跨域</span></span><br><span class="line">                .setAllowedOrigins(<span class="string">"*"</span>)</span><br><span class="line">                .withSockJS();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> </span>{</span><br><span class="line">        registry.enableSimpleBroker(<span class="string">"/user"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="2-5-消息接收"><a href="#2-5-消息接收" class="headerlink" title="2.5 消息接收"></a>2.5 消息接收</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuhan.test.websocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.wuhan.test.common.MsgVo;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringEscapeUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.simp.SimpMessagingTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: bigbao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019/8/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageReceiver</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SimpMessagingTemplate simpMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${websocket.test.channel}")</span></span><br><span class="line">    <span class="keyword">private</span> String testchannel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从redis拿到消息后推送到前端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String data, String channel)</span> </span>{</span><br><span class="line">        log.info(<span class="string">"心跳维持：channel=【{}】，data=【{}】"</span>, channel, data);</span><br><span class="line">        <span class="keyword">if</span> (testchannel.equals(channel)) {</span><br><span class="line">            data = data.substring(data.indexOf(<span class="string">"{"</span>, <span class="number">1</span>),data.lastIndexOf(<span class="string">"}"</span>)+<span class="number">1</span>);</span><br><span class="line">            MsgVo msgVo = JSON.parseObject(data, MsgVo.class);</span><br><span class="line">            String type = msgVo.getType();</span><br><span class="line">            simpMessagingTemplate.convertAndSendToUser(type, <span class="string">"/message"</span>, data);</span><br><span class="line"><span class="comment">//            simpMessagingTemplate.convertAndSendToUser("1", "/message", data);</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            log.error(<span class="string">"webSocket无效的消息"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="三、消息通信"><a href="#三、消息通信" class="headerlink" title="三、消息通信"></a>三、消息通信</h4><h4 id="3-1-服务器向客户端发送消息"><a href="#3-1-服务器向客户端发送消息" class="headerlink" title="3.1 服务器向客户端发送消息"></a>3.1 服务器向客户端发送消息</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuhan.test.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.wuhan.test.common.MsgVo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping("/test")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${websocket.test.channel}")</span></span><br><span class="line">    <span class="keyword">private</span> String testchannel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = "/testWebSocket/{type}")</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testWebSocket</span><span class="params">(<span class="meta">@PathVariable("type")</span> String type)</span></span>{</span><br><span class="line">        MsgVo msgVo = <span class="keyword">new</span> MsgVo();</span><br><span class="line">        msgVo.setType(type);</span><br><span class="line">        msgVo.setCode(<span class="number">200</span>);</span><br><span class="line">        msgVo.setMsg(<span class="string">"测试websocket发送消息通信等"</span>);</span><br><span class="line">        String result = JSON.toJSONString(msgVo);</span><br><span class="line"></span><br><span class="line">        redisTemplate.convertAndSend(testchannel,msgVo);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="3-2-客户端向服务器端发送消息"><a href="#3-2-客户端向服务器端发送消息" class="headerlink" title="3.2 客户端向服务器端发送消息"></a>3.2 客户端向服务器端发送消息</h4><h5 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuhan.test.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.wuhan.test.common.MsgVo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.MessageMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${websocket.test.channel}")</span></span><br><span class="line">    <span class="keyword">private</span> String testchannel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MessageMapping(value = "/message/test")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String message)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"message=="</span> + message);</span><br><span class="line">        MsgVo msgVo = <span class="keyword">new</span> MsgVo();</span><br><span class="line">        msgVo.setType(<span class="string">"1"</span>);</span><br><span class="line">        msgVo.setCode(<span class="number">200</span>);</span><br><span class="line">        msgVo.setMsg(message);</span><br><span class="line">        String result = JSON.toJSONString(msgVo);</span><br><span class="line">        redisTemplate.convertAndSend(testchannel,msgVo);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h5 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h5><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">sendName</span>(<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 向服务端发送消息</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> name = $(<span class="string">'#name'</span>).val();</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 通过 stompClient.send 向 /hello （服务端）发送信息，对应控制器 @MessageMapping 中的定义</span></span></span><br><span class="line"><span class="javascript">        stompClient.send(<span class="string">"/message/test"</span>, {}, <span class="built_in">JSON</span>.stringify({ <span class="string">'name'</span>: name }));</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br></pre></td></tr></tbody></table></figure>

<h4 id="四、测试结果"><a href="#四、测试结果" class="headerlink" title="四、测试结果"></a>四、测试结果</h4><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">监测websocket服务可用 http:<span class="regexp">//</span>localhost:<span class="number">8089</span><span class="regexp">/api/</span>webSocket</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://gitee.com/link_chm/img/raw/master/image-20211207111926806.png" alt="image-20211207111926806"></p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">服务器端向客户端通信测试</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://gitee.com/link_chm/img/raw/master/image-20211207112057313.png" alt="image-20211207112057313"></p>
<p><img src="https://gitee.com/link_chm/img/raw/master/image-20211207112135112.png" alt="image-20211207112135112"></p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">客户端向服务器端发送通信</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://gitee.com/link_chm/img/raw/master/image-20211207112237402.png" alt="image-20211207112237402"></p>
</body></html>]]></content>
      <categories>
        <category>websocket</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
</search>
